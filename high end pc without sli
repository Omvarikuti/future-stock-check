import os
import numpy as np
import pandas as pd
import matplotlib
matplotlib.use('Agg')  # ← Non‑GUI backend, prevents NSException :contentReference[oaicite:8]{index=8}
import matplotlib.pyplot as plt
from tensorflow import keras
from keras import layers, mixed_precision
from sklearn.preprocessing import MinMaxScaler
import yfinance as yf
import tensorflow as tf
import joblib
import multiprocessing

# ─── GLOBAL SETUP ───────────────────────────────────────────────────────────────
mixed_precision.set_global_policy('mixed_float16')
physical_gpus = tf.config.list_physical_devices('GPU')
if physical_gpus:
    tf.config.experimental.set_memory_growth(physical_gpus[0], True)

os.makedirs('stress_intc_fix', exist_ok=True)
SEQ_LEN = 200

# ─── DATA PREP ─────────────────────────────────────────────────────────────────
def create_sequences(arr, seq_len):
    X, y = [], []
    for i in range(len(arr) - seq_len):
        X.append(arr[i:i + seq_len])
        y.append(arr[i + seq_len])
    return np.array(X), np.array(y)

def load_data():
    data = yf.download('INTC', start='2015-01-01', end='2025-04-18')
    prices = data['Close'].values.reshape(-1, 1)
    scaler = MinMaxScaler()
    scaled = scaler.fit_transform(prices)
    X, y = create_sequences(scaled, SEQ_LEN)
    # inflate for stress
    X, y = np.tile(X, (4,1,1)), np.tile(y, (4,1))
    split = int(0.8 * len(X))
    return X[:split], X[split:], y[:split], y[split:], scaler

# ─── MODEL DEFINITION ─────────────────────────────────────────────────────────
def build_model():
    inp = keras.Input((SEQ_LEN,1))
    x = inp
    for _ in range(8):
        x = layers.LSTM(1024, return_sequences=True, dropout=0.5)(x)
    x = layers.LSTM(1024, dropout=0.5)(x)
    for _ in range(4):
        x = layers.Dense(2048, activation='mish')(x)
    out = layers.Dense(1, dtype='float32')(x)
    m = keras.Model(inp, out)
    m.compile(optimizer='adam', loss='mse', metrics=['mae'])
    return m

# ─── TRAIN WORKER ───────────────────────────────────────────────────────────────
def train_worker(rank, X_train, X_val, y_train, y_val):
    model = build_model()
    hist = model.fit(
        X_train, y_train,
        validation_data=(X_val, y_val),
        epochs=100, batch_size=4096, verbose=0
    )
    model.save(f'stress_intc_fix/model_{rank}.h5')
    pd.DataFrame(hist.history).to_csv(f'stress_intc_fix/history_{rank}.csv', index=False)

# ─── MAIN ENTRY POINT ──────────────────────────────────────────────────────────
if __name__ == '__main__':
    # Optionally use fork to avoid spawn complexities :contentReference[oaicite:9]{index=9}
    multiprocessing.set_start_method('fork', force=True)

    X_tr, X_va, y_tr, y_va, scaler = load_data()

    # Spawn training processes
    procs, N = [], min(multiprocessing.cpu_count(), 4)
    for i in range(N):
        p = multiprocessing.Process(
            target=train_worker,
            args=(i, X_tr, X_va, y_tr, y_va)
        )
        p.start()
        procs.append(p)

    for p in procs:
        p.join()

    # ─── AGGREGATE & PLOT IN MAIN THREAD (no NSException!) ───────────────────────
    all_hist = [pd.read_csv(f'stress_intc_fix/history_{i}.csv') for i in range(N)]
    avg_loss      = np.mean([h['loss']     for h in all_hist], axis=0)
    avg_val_loss  = np.mean([h['val_loss'] for h in all_hist], axis=0)
    avg_mae       = np.mean([h['mae']      for h in all_hist], axis=0)
    avg_val_mae   = np.mean([h['val_mae']  for h in all_hist], axis=0)

    plt.figure(figsize=(12,6))
    plt.plot(avg_loss,     label='Avg Train Loss')
    plt.plot(avg_val_loss, label='Avg Val Loss')
    plt.plot(avg_mae,      label='Avg Train MAE')
    plt.plot(avg_val_mae,  label='Avg Val MAE')
    plt.xlabel('Epoch'); plt.ylabel('Value')
    plt.legend()
    plt.savefig('stress_intc_fix/aggregated_metrics.png')  # Safe headless save :contentReference[oaicite:10]{index=10}

    # Save scaler & validation data
    joblib.dump(scaler, 'stress_intc_fix/scaler.pkl')
    np.save('stress_intc_fix/X_val.npy', X_va)
    np.save('stress_intc_fix/y_val.npy', y_va)

    print("Completed without NSException crash!")  
